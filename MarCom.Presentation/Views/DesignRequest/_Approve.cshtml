@model MarCom.ViewModel.DesignApproveViewModel


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <input type="hidden" id="request-id" value="@Model.Id" />
        <table>
            <tr>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.NameRequest, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.NameRequest, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.NameRequest, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EventCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.EventCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Request_Date, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Request_Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Request_Date, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Title_Header, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title_Header, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Title_Header, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
                <td rowspan="3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <textarea cols="27" rows="8" readonly="readonly">@Model.Note</textarea>
                            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>                
            </tr>
            <tr>
                <td>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Assign_To, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.Assign_To, (IEnumerable<SelectListItem>)
ViewBag.Employee, "Select Menu Name", new { @class = "form-control", @id = "assignto" })
                            @Html.ValidationMessageFor(model => model.Assign_To, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </td>
            </tr>
        </table>

        @*<table>
            <tbody>

            </tbody>
            <thead></thead>
        </table>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.Reject_Reason, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Reject_Reason, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Reject_Reason, "", new { @class = "text-danger" })
                </div>
            </div>*@





        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Approve" class="btn btn-primary" onclick="Approve(2)" />
                <input type="button" value="Reject" class="btn btn-danger" data-toggle="modal" data-target="#reason-input" />
                <input type="button" value="Cancel" class="btn btn-default" data-dismiss="modal" />
            </div>
        </div>
    </div>
}


    <div class="modal fade" tabindex="-1" role="dialog" id="reason-input">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="midtext text-bold text-red">&nbsp;Reason Reject</span>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <textarea cols="30" rows="5" id="reject-reason"></textarea>
                        <input type="submit" value="Reject" class="btn btn-danger" onclick="Approve(0)" />
                        <input type="button" value="Cancel" class="btn btn-default" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </div>
    </div>


@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@

