@model MarCom.Presentation.Models.RegisterViewModel
@using System
@using MarCom.Repository
@using MarCom.ViewModel

@{ 
    Model.Create_Date = DateTime.Now;
    //RoleViewModel result = RoleRepo.GetById(Model.Id);
   // Model.RoleId = result.Id;
}


@using (Html.BeginForm("Add", "User", FormMethod.Post, new { id = "add-form", name = "add-form" })) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.M_Employee_Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.M_Employee_Id, (IEnumerable<SelectListItem>)ViewBag.Employee, "Select Employee", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.M_Employee_Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.HiddenFor(model => model.Create_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Create_Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Create_Date, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.RoleId, (IEnumerable<SelectListItem>)ViewBag.Role, "Select Role", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Cancel" class="btn btn-warning" data-dismiss="modal" />
                <input type="submit" value="Save" id="btn-add" class="btn btn-primary" />
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryval")

<script type="text/javascript">
    $(".btn-add").submit(function () {
        $.ajax({
            url: '@Url.Action("Add", "User")',
            type: this.method,
            data: $(this).serialize(),
            success: function (result) {
                if (result.success) {
                    alert("Succesful! " + result.entity.Username + " has been saved")
                    $(".modal").modal("hide");
                    GetList();
                }
                else {
                    alert("Error! User has not been saved. \n" + result.message);
                }
            }
        });
        return false;
    });
</script>

